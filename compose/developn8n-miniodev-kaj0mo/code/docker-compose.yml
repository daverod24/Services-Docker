services:
  minio_dev:
    image: minio/minio:latest
    hostname: minio_dev
    container_name: minio_dev
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - "../files/s3_data:/data"
    networks:
      - dokploy-network 
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
      MINIO_ROOT_PASSWORD: ${ADMIN_PASSWORD:-minio123}
    command: server /data --console-address ":9001"
    deploy:  # Sección para configuraciones de despliegue, incluyendo límites de recursos
      resources:
        limits:  # Límites máximos que el contenedor puede usar
          cpus: '1'      # Límite de CPU: 1 core (puedes usar decimales como '0.5' para medio core)
          memory: 2048M   # Límite de memoria: 1024 MB (puedes usar G para GB, K para KB, etc.)
        # reservations: # (Opcional) Reservas mínimas garantizadas (no obligatorio para límites)
        #   cpus: '0.5'
        #   memory: 256M


# This service just makes sure a bucket with the right policies is created
  createbuckets_dev:
    image: minio/mc:latest
    hostname: nbuckdev
    container_name: nbuckdev
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
      MINIO_ROOT_PASSWORD: ${ADMIN_PASSWORD:-minio123}
    depends_on:
      - minio_dev
    entrypoint: |
        /bin/sh -c "
        sleep 10;
        # Configure MinIO client
        /usr/bin/mc config host add minio_dev http://minio_dev:9000 ${MINIO_ROOT_USER} ${ADMIN_PASSWORD};
        
        # Create buckets
        /usr/bin/mc mb --ignore-existing minio_dev/respaldos;
        /usr/bin/mc mb --ignore-existing minio_dev/documentos;
        /usr/bin/mc mb --ignore-existing minio_dev/media;
        /usr/bin/mc mb --ignore-existing minio_dev/typebot;
        /usr/bin/mc mb --ignore-existing minio_dev/chatwoot;
        /usr/bin/mc mb --ignore-existing minio_dev/dify;
        
        # Set public access for respaldos/public
        /usr/bin/mc anonymous set public minio_dev/respaldos/public;
        
        # Create users with API access
        /usr/bin/mc admin user add minio_dev user1 user1password;
        /usr/bin/mc admin user add minio_dev user2 user2password;
        /usr/bin/mc admin user add minio_dev user3 user3password;
        
        # Create policy for API access
        echo '{
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
          "s3:GetObject",
          "s3:PutObject",
          "s3:ListBucket"
              ],
              "Resource": [
          "arn:aws:s3:::respaldos/*",
          "arn:aws:s3:::respaldos",
          "arn:aws:s3:::documentos/*",
          "arn:aws:s3:::documentos",
          "arn:aws:s3:::media/*",
          "arn:aws:s3:::media"
              ]
            }
          ]
        }' > /tmp/policy.json;
        
        # Apply policy to users
        /usr/bin/mc admin policy add minio_dev apiaccess /tmp/policy.json;
        /usr/bin/mc admin policy set minio_dev apiaccess user=user1;
        /usr/bin/mc admin policy set minio_dev apiaccess user=user2;
        /usr/bin/mc admin policy set minio_dev apiaccess user=user3;
        exit 0;
        "

volumes:
  minio-data-test:




networks:
  dokploy-network:
    external: true